syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "events.proto";
package io.cucumber.messages;
option ruby_package = "Cucumber.Messages";
option go_package = "messages";

// All messages sent between cucumber-engine and its calling process must be of type CommandWrapper
message CommandWrapper {
  string id = 1;
  oneof message {
    // Sent by caller to start the cucumber-engine
    CommandStart commandStart = 2;

    // Sent by caller to signal an action (from below) as been completed
    CommandActionComplete commandActionComplete = 3;

    // Sent by cucumber-engine to perform actions
    CommandRunBeforeTestRunHooks commandRunBeforeTestRunHooks = 4;
    CommandInitializeTestCase commandInitializeTestCase = 5;
    CommandRunBeforeTestCaseHook commandRunBeforeTestCaseHook = 6;
    CommandRunTestStep commandRunTestStep = 7;
    CommandRunAfterTestCaseHook commandRunAfterTestCaseHook = 8;
    CommandRunAfterTestRunHooks commandRunAfterTestRunHooks = 9;
    CommandGenerateSnippet commandGenerateSnippet = 10;

    // Sent by cucumber-engine to be forwarded to formatters
    EventWrapper commandEvent = 11;

    // Sent by cucumber-engine to signal fatal error
    string commandError = 12;
  }
}

////// CommandStart

message CommandStart {
  string baseDirectory = 2;
	FeaturesConfig featuresConfig = 3;
	RuntimeConfig runtimeConfig = 4;
	SupportCodeConfig supportCodeConfig = 5;
}

message FeaturesConfig {
  repeated string absolutePaths = 1;
	string language = 2;
  FeaturesFilterConfig filters = 3;
	FeaturesOrder order = 4;
}

message FeaturesFilterConfig {
	string tagExpression = 1;
	repeated string nameRegularExpressions = 2;
	repeated UriToLinesMapping uriToLinesMapping = 3;
}

message UriToLinesMapping {
  string absolutePath = 1;
  repeated uint64 lines = 2;
}

message FeaturesOrder {
	FeaturesOrderType type = 1;
	uint64 seed = 2;
}

enum FeaturesOrderType {
  ORDER_OF_DEFINITION = 0;
  RANDOM = 1;
}

message RuntimeConfig {
	bool isFailFast = 1;
	bool isDryRun = 2;
	bool isStrict = 3;
	uint64 maxParallel = 4;
}

message SupportCodeConfig {
	repeated TestCaseHookDefinitionConfig beforeTestCaseHookDefinitionConfigs = 1;
  repeated TestCaseHookDefinitionConfig afterTestCaseHookDefinitionConfigs = 2;
  repeated StepDefinitionConfig stepDefinitionConfigs = 3;
  repeated ParameterTypeConfig parameterTypeConfigs = 4;
}

message TestCaseHookDefinitionConfig {
	string id = 1;
	string tagExpression = 2;
	SourceReference location = 3;
}

message StepDefinitionConfig {
	string id = 1;
  StepDefinitionPattern pattern = 2;
  SourceReference location = 3;
}

message StepDefinitionPattern {
	string source = 1;
	StepDefinitionPatternType type = 2;
}

enum StepDefinitionPatternType {
  CUCUMBER_EXPRESSION = 0;
  REGULAR_EXPRESSION = 1;
}

message ParameterTypeConfig {
	string name = 1;
	repeated string regularExpressions = 2;
	bool preferForRegularExpressionMatch = 3;
	bool useForSnippets = 4;
}

////// CommandActionComplete

message CommandActionComplete {
  string completedId = 1;

  oneof result {
    // Used for responses to CommandRunBeforeTestCaseHook / CommandRunTestStep / CommandRunAfterTestCaseHook
    TestResult testResult = 2;
    // Used for response to CommandGenerateSnippet
    string snippet = 3;
  }
}

////// Actions

message CommandRunBeforeTestRunHooks {}

message CommandRunAfterTestRunHooks {}

message CommandInitializeTestCase {
  string testCaseId = 1;
  Pickle pickle = 2;
}

message CommandRunBeforeTestCaseHook {
  string testCaseId = 1;
  string testCaseHookDefinitionId = 2;
}

message CommandRunAfterTestCaseHook {
  string testCaseId = 1;
  string testCaseHookDefinitionId = 2;
}

message CommandRunTestStep {
  string testCaseId = 1;
  string stepDefinitionId = 2;
  repeated PatternMatch patternMatches = 3;
}

message PatternMatch {
	repeated string captures = 1;
	string parameterTypeName = 2;
  oneof pickleArgument {
    PickleDocString doc_string = 3;
    PickleTable data_table = 4;
  }
}

message CommandGenerateSnippet {
  repeated GeneratedExpression generatedExpressions = 1;
  oneof pickleArgument {
    PickleDocString doc_string = 2;
    PickleTable data_table = 3;
  }
}

message GeneratedExpression {
  string text = 1;
  repeated string parameterTypeNames = 2;
}
